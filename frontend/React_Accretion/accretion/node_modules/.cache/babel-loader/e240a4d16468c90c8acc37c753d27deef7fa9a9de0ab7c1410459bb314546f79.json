{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nexport default function AuthJWT() {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [jwt, setJWT] = useState(JSON.parse(localStorage.getItem('jwt')));\n  const checkJWTaccess = async token => {\n    try {\n      const response = await fetch(\"http://localhost:8000/auth/users/\", {\n        method: 'GET',\n        headers: {\n          'Authorization': `JWT ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(response.JSON());\n      }\n      if (response.ok) {\n        setIsAuthenticated(true);\n      }\n      return response.json();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  if (jwt) {\n    useEffect(() => {\n      console.log(\"JWT found in local storage\");\n    }, []);\n\n    // console.log(\"JWT exists\");\n    // fetch(\"http://localhost:8000/auth/users/\", {\n    //     method: 'GET', \n    //     headers: {\n    //         'Authorization': `JWT ${jwt.access}`,\n    //         'Content-Type': 'application/json'\n    //     }\n    // })\n    // .then( response => {\n    //     if (response.ok) {\n    //         setIsAuthenticated(true);\n    //     } else {\n    //         // refresh token \n    //         fetch(\"http://localhost:8000/auth/jwt/refresh/\", {\n    //             method: 'POST', \n    //             headers: {\n    //                 'Content-Type': 'application/json'\n    //             },\n    //             body: JSON.stringify({\n    //                 \"refresh\": jwt.refresh\n    //             })\n    //         })\n    //         .then( response => {\n    //             if (response.ok) {\n    //                 console.log(\"successfully refreshed token\");\n    //                 return response.json();\n    //             } else {\n    //                 throw new Error(\"Failed to refresh token\");\n    //             }\n    //         })\n    //         .then( data => {\n    //             setJWT((prevJWT) => ({\n    //                 ...prevJWT, \n    //                 \"access\": data.access\n    //             }));\n    //             localStorage.setItem('jwt', JSON.stringify(jwt));\n    //         })\n    //     }\n    // })\n  }\n\n  return isAuthenticated;\n}\n_s(AuthJWT, \"JouVH93RPO+xe1OEUnn3z0WW684=\");\n_c = AuthJWT;\nvar _c;\n$RefreshReg$(_c, \"AuthJWT\");","map":{"version":3,"names":["useState","useEffect","AuthJWT","_s","isAuthenticated","setIsAuthenticated","jwt","setJWT","JSON","parse","localStorage","getItem","checkJWTaccess","token","response","fetch","method","headers","ok","Error","json","error","console","log","_c","$RefreshReg$"],"sources":["/Users/yxni-mbp/Dropbox (Personal)/Startup/Accretion/Website/frontend/React_Accretion/accretion/src/user-auth/AuthJWT.js"],"sourcesContent":["import {useState, useEffect} from 'react';\n\nexport default function AuthJWT() {\n    \n    const [isAuthenticated, setIsAuthenticated] = useState(false);\n    const [jwt, setJWT] = useState(JSON.parse(localStorage.getItem('jwt')));\n\n    const checkJWTaccess = async (token) => { \n        try {\n            const response = await fetch(\"http://localhost:8000/auth/users/\", {\n                method: 'GET', \n                headers: {\n                    'Authorization': `JWT ${token}`,\n                    'Content-Type': 'application/json'\n                }\n            })\n\n            if (!response.ok) {\n                throw new Error(response.JSON()) \n            }\n            \n            if (response.ok) {\n                setIsAuthenticated(true);\n            }\n            \n            return response.json();\n        }\n        catch (error) {\n            console.log(error); \n        }\n    }\n\n    if (jwt) { \n        useEffect(() => {\n            console.log(\"JWT found in local storage\");\n        },[]);\n        \n        // console.log(\"JWT exists\");\n        // fetch(\"http://localhost:8000/auth/users/\", {\n        //     method: 'GET', \n        //     headers: {\n        //         'Authorization': `JWT ${jwt.access}`,\n        //         'Content-Type': 'application/json'\n        //     }\n        // })\n        // .then( response => {\n        //     if (response.ok) {\n        //         setIsAuthenticated(true);\n        //     } else {\n        //         // refresh token \n        //         fetch(\"http://localhost:8000/auth/jwt/refresh/\", {\n        //             method: 'POST', \n        //             headers: {\n        //                 'Content-Type': 'application/json'\n        //             },\n        //             body: JSON.stringify({\n        //                 \"refresh\": jwt.refresh\n        //             })\n        //         })\n        //         .then( response => {\n        //             if (response.ok) {\n        //                 console.log(\"successfully refreshed token\");\n        //                 return response.json();\n        //             } else {\n        //                 throw new Error(\"Failed to refresh token\");\n        //             }\n        //         })\n        //         .then( data => {\n        //             setJWT((prevJWT) => ({\n        //                 ...prevJWT, \n        //                 \"access\": data.access\n        //             }));\n        //             localStorage.setItem('jwt', JSON.stringify(jwt));\n        //         })\n        //     }\n        // })\n    }   \n\n    return isAuthenticated;\n}"],"mappings":";AAAA,SAAQA,QAAQ,EAAEC,SAAS,QAAO,OAAO;AAEzC,eAAe,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EAE9B,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGL,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAACM,GAAG,EAAEC,MAAM,CAAC,GAAGP,QAAQ,CAACQ,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;EAEvE,MAAMC,cAAc,GAAG,MAAOC,KAAK,IAAK;IACpC,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAmC,EAAE;QAC9DC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACL,eAAe,EAAG,OAAMJ,KAAM,EAAC;UAC/B,cAAc,EAAE;QACpB;MACJ,CAAC,CAAC;MAEF,IAAI,CAACC,QAAQ,CAACI,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAACL,QAAQ,CAACN,IAAI,CAAC,CAAC,CAAC;MACpC;MAEA,IAAIM,QAAQ,CAACI,EAAE,EAAE;QACbb,kBAAkB,CAAC,IAAI,CAAC;MAC5B;MAEA,OAAOS,QAAQ,CAACM,IAAI,CAAC,CAAC;IAC1B,CAAC,CACD,OAAOC,KAAK,EAAE;MACVC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACtB;EACJ,CAAC;EAED,IAAIf,GAAG,EAAE;IACLL,SAAS,CAAC,MAAM;MACZqB,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;IAC7C,CAAC,EAAC,EAAE,CAAC;;IAEL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACJ;;EAEA,OAAOnB,eAAe;AAC1B;AAACD,EAAA,CA7EuBD,OAAO;AAAAsB,EAAA,GAAPtB,OAAO;AAAA,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}