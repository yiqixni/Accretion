{"ast":null,"code":"import { frame, cancelFrame } from '../../frameloop/frame.mjs';\nconst toResolve = new Set();\nlet isScheduled = false;\nlet anyNeedsMeasurement = false;\nfunction measureAllKeyframes() {\n  if (anyNeedsMeasurement) {\n    // Write\n    toResolve.forEach(resolver => {\n      resolver.needsMeasurement && resolver.unsetTransforms();\n    });\n    // Read\n    toResolve.forEach(resolver => {\n      resolver.needsMeasurement && resolver.measureInitialState();\n    });\n    // Write\n    toResolve.forEach(resolver => {\n      resolver.needsMeasurement && resolver.renderEndStyles();\n    });\n    // Read\n    toResolve.forEach(resolver => {\n      resolver.needsMeasurement && resolver.measureEndState();\n    });\n  }\n  anyNeedsMeasurement = false;\n  isScheduled = false;\n  toResolve.forEach(resolver => resolver.complete());\n  toResolve.clear();\n}\nfunction readAllKeyframes() {\n  toResolve.forEach(resolver => {\n    resolver.readKeyframes();\n    if (resolver.needsMeasurement) {\n      anyNeedsMeasurement = true;\n    }\n  });\n  frame.resolveKeyframes(measureAllKeyframes);\n}\nfunction flushKeyframeResolvers() {\n  readAllKeyframes();\n  measureAllKeyframes();\n  cancelFrame(readAllKeyframes);\n  cancelFrame(measureAllKeyframes);\n}\nclass KeyframeResolver {\n  constructor(unresolvedKeyframes, onComplete, name, motionValue, element, isAsync = false) {\n    /**\n     * Track whether this resolver has completed. Once complete, it never\n     * needs to attempt keyframe resolution again.\n     */\n    this.isComplete = false;\n    /**\n     * Track whether this resolver is async. If it is, it'll be added to the\n     * resolver queue and flushed in the next frame. Resolvers that aren't going\n     * to trigger read/write thrashing don't need to be async.\n     */\n    this.isAsync = false;\n    /**\n     * Track whether this resolver needs to perform a measurement\n     * to resolve its keyframes.\n     */\n    this.needsMeasurement = false;\n    /**\n     * Track whether this resolver is currently scheduled to resolve\n     * to allow it to be cancelled and resumed externally.\n     */\n    this.isScheduled = false;\n    this.unresolvedKeyframes = [...unresolvedKeyframes];\n    this.onComplete = onComplete;\n    this.name = name;\n    this.motionValue = motionValue;\n    this.element = element;\n    this.isAsync = isAsync;\n  }\n  scheduleResolve() {\n    this.isScheduled = true;\n    if (this.isAsync) {\n      toResolve.add(this);\n      if (!isScheduled) {\n        isScheduled = true;\n        frame.read(readAllKeyframes);\n      }\n    } else {\n      this.readKeyframes();\n      this.complete();\n    }\n  }\n  readKeyframes() {\n    const {\n      unresolvedKeyframes,\n      name,\n      element,\n      motionValue\n    } = this;\n    /**\n     * If a keyframe is null, we hydrate it either by reading it from\n     * the instance, or propagating from previous keyframes.\n     */\n    for (let i = 0; i < unresolvedKeyframes.length; i++) {\n      if (unresolvedKeyframes[i] === null) {\n        /**\n         * If the first keyframe is null, we need to find its value by sampling the element\n         */\n        if (i === 0) {\n          const currentValue = motionValue === null || motionValue === void 0 ? void 0 : motionValue.get();\n          const finalKeyframe = unresolvedKeyframes[unresolvedKeyframes.length - 1];\n          if (currentValue !== undefined) {\n            unresolvedKeyframes[0] = currentValue;\n          } else if (element && name) {\n            const valueAsRead = element.readValue(name, finalKeyframe);\n            if (valueAsRead !== undefined && valueAsRead !== null) {\n              unresolvedKeyframes[0] = valueAsRead;\n            }\n          }\n          if (unresolvedKeyframes[0] === undefined) {\n            unresolvedKeyframes[0] = finalKeyframe;\n          }\n          if (motionValue && currentValue === undefined) {\n            motionValue.set(unresolvedKeyframes[0]);\n          }\n        } else {\n          unresolvedKeyframes[i] = unresolvedKeyframes[i - 1];\n        }\n      }\n    }\n  }\n  unsetTransforms() {}\n  measureInitialState() {}\n  renderEndStyles() {}\n  measureEndState() {}\n  complete() {\n    this.isComplete = true;\n    this.onComplete(this.unresolvedKeyframes);\n    toResolve.delete(this);\n  }\n  cancel() {\n    if (!this.isComplete) {\n      this.isScheduled = false;\n      toResolve.delete(this);\n    }\n  }\n  resume() {\n    if (!this.isComplete) this.scheduleResolve();\n  }\n}\nexport { KeyframeResolver, flushKeyframeResolvers };","map":{"version":3,"names":["frame","cancelFrame","toResolve","Set","isScheduled","anyNeedsMeasurement","measureAllKeyframes","forEach","resolver","needsMeasurement","unsetTransforms","measureInitialState","renderEndStyles","measureEndState","complete","clear","readAllKeyframes","readKeyframes","resolveKeyframes","flushKeyframeResolvers","KeyframeResolver","constructor","unresolvedKeyframes","onComplete","name","motionValue","element","isAsync","isComplete","scheduleResolve","add","read","i","length","currentValue","get","finalKeyframe","undefined","valueAsRead","readValue","set","delete","cancel","resume"],"sources":["/Users/yxni-mbp/Dropbox (Personal)/Startup/Accretion/Website/frontend/React_Accretion/accretion/node_modules/framer-motion/dist/es/render/utils/KeyframesResolver.mjs"],"sourcesContent":["import { frame, cancelFrame } from '../../frameloop/frame.mjs';\n\nconst toResolve = new Set();\nlet isScheduled = false;\nlet anyNeedsMeasurement = false;\nfunction measureAllKeyframes() {\n    if (anyNeedsMeasurement) {\n        // Write\n        toResolve.forEach((resolver) => {\n            resolver.needsMeasurement && resolver.unsetTransforms();\n        });\n        // Read\n        toResolve.forEach((resolver) => {\n            resolver.needsMeasurement && resolver.measureInitialState();\n        });\n        // Write\n        toResolve.forEach((resolver) => {\n            resolver.needsMeasurement && resolver.renderEndStyles();\n        });\n        // Read\n        toResolve.forEach((resolver) => {\n            resolver.needsMeasurement && resolver.measureEndState();\n        });\n    }\n    anyNeedsMeasurement = false;\n    isScheduled = false;\n    toResolve.forEach((resolver) => resolver.complete());\n    toResolve.clear();\n}\nfunction readAllKeyframes() {\n    toResolve.forEach((resolver) => {\n        resolver.readKeyframes();\n        if (resolver.needsMeasurement) {\n            anyNeedsMeasurement = true;\n        }\n    });\n    frame.resolveKeyframes(measureAllKeyframes);\n}\nfunction flushKeyframeResolvers() {\n    readAllKeyframes();\n    measureAllKeyframes();\n    cancelFrame(readAllKeyframes);\n    cancelFrame(measureAllKeyframes);\n}\nclass KeyframeResolver {\n    constructor(unresolvedKeyframes, onComplete, name, motionValue, element, isAsync = false) {\n        /**\n         * Track whether this resolver has completed. Once complete, it never\n         * needs to attempt keyframe resolution again.\n         */\n        this.isComplete = false;\n        /**\n         * Track whether this resolver is async. If it is, it'll be added to the\n         * resolver queue and flushed in the next frame. Resolvers that aren't going\n         * to trigger read/write thrashing don't need to be async.\n         */\n        this.isAsync = false;\n        /**\n         * Track whether this resolver needs to perform a measurement\n         * to resolve its keyframes.\n         */\n        this.needsMeasurement = false;\n        /**\n         * Track whether this resolver is currently scheduled to resolve\n         * to allow it to be cancelled and resumed externally.\n         */\n        this.isScheduled = false;\n        this.unresolvedKeyframes = [...unresolvedKeyframes];\n        this.onComplete = onComplete;\n        this.name = name;\n        this.motionValue = motionValue;\n        this.element = element;\n        this.isAsync = isAsync;\n    }\n    scheduleResolve() {\n        this.isScheduled = true;\n        if (this.isAsync) {\n            toResolve.add(this);\n            if (!isScheduled) {\n                isScheduled = true;\n                frame.read(readAllKeyframes);\n            }\n        }\n        else {\n            this.readKeyframes();\n            this.complete();\n        }\n    }\n    readKeyframes() {\n        const { unresolvedKeyframes, name, element, motionValue } = this;\n        /**\n         * If a keyframe is null, we hydrate it either by reading it from\n         * the instance, or propagating from previous keyframes.\n         */\n        for (let i = 0; i < unresolvedKeyframes.length; i++) {\n            if (unresolvedKeyframes[i] === null) {\n                /**\n                 * If the first keyframe is null, we need to find its value by sampling the element\n                 */\n                if (i === 0) {\n                    const currentValue = motionValue === null || motionValue === void 0 ? void 0 : motionValue.get();\n                    const finalKeyframe = unresolvedKeyframes[unresolvedKeyframes.length - 1];\n                    if (currentValue !== undefined) {\n                        unresolvedKeyframes[0] = currentValue;\n                    }\n                    else if (element && name) {\n                        const valueAsRead = element.readValue(name, finalKeyframe);\n                        if (valueAsRead !== undefined && valueAsRead !== null) {\n                            unresolvedKeyframes[0] = valueAsRead;\n                        }\n                    }\n                    if (unresolvedKeyframes[0] === undefined) {\n                        unresolvedKeyframes[0] = finalKeyframe;\n                    }\n                    if (motionValue && currentValue === undefined) {\n                        motionValue.set(unresolvedKeyframes[0]);\n                    }\n                }\n                else {\n                    unresolvedKeyframes[i] = unresolvedKeyframes[i - 1];\n                }\n            }\n        }\n    }\n    unsetTransforms() { }\n    measureInitialState() { }\n    renderEndStyles() { }\n    measureEndState() { }\n    complete() {\n        this.isComplete = true;\n        this.onComplete(this.unresolvedKeyframes);\n        toResolve.delete(this);\n    }\n    cancel() {\n        if (!this.isComplete) {\n            this.isScheduled = false;\n            toResolve.delete(this);\n        }\n    }\n    resume() {\n        if (!this.isComplete)\n            this.scheduleResolve();\n    }\n}\n\nexport { KeyframeResolver, flushKeyframeResolvers };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}